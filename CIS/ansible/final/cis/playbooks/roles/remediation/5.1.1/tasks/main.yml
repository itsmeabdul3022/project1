---
    # 1. Backup the file (kept for safety)
    - name: Get current timestamp for unique backup name
      ansible.builtin.command: date +%Y%m%d%H%M%S
      register: timestamp
      changed_when: false

    - name: Create a dated backup of the password file
      ansible.builtin.copy:
        src: /etc/security/passwd
        dest: /etc/security/passwd.bak_{{ timestamp.stdout }}
        remote_src: yes
        mode: '0600'

    # 2. Find all users in /etc/security/passwd with empty passwords
    - name: 1. Find users with empty passwords and create clean list
      # Find empty password lines, get 5 lines before context (-B 5), then filter for the username line.
      ansible.builtin.shell: |
        /usr/bin/awk -F: '/:/ { print $1 }' /etc/security/passwd |
        while read username; do
        
            # Use lsuser to get the password attribute. This is often '!' for no local password.
            # We strip the "password=" prefix to get just the value.
            password_status=$(/usr/sbin/lsuser -a password "$username" | /usr/bin/awk -F'=' ' { print $2 } ')
        
            # If lsuser returns a status that suggests the password is not set (!, *, or empty),
            # perform the authoritative check in the /etc/security/passwd file.
            if [ "$password_status" = "!" ] || [ -z "$password_status" ] || [ "$password_status" = "*" ]; then
        
                # Use a single, powerful grep command to search the entire file for the user's stanza
                # that explicitly contains the 'password =' string (a truly blank hash).
                # -p (paragraph mode) is the correct flag to search within the user's stanza.
                if /usr/bin/grep -p "^$username:" /etc/security/passwd | /usr/bin/grep "password = *$" >/dev/null 2>&1; then
                    echo "$username"
                fi
            fi
        done
      register: users_to_lock_raw
      changed_when: users_to_lock_raw.stdout | length > 0


    - name: Set fact with clean list of usernames for the loop
      # This uses the 'split' filter to explicitly turn the shell output string into a list of strings
      ansible.builtin.set_fact:
        users_to_lock: "{{ users_to_lock_raw.stdout.split('\n') | reject('equalto', '') | list }}"

    - name: 2. Lock account, set expiration, and set ADMCHG flag (Combined Task)
      # Executes chuser for locking and pwdadm for the ADMCHG flag.
      ansible.builtin.shell: |
        /usr/bin/chuser account_locked='true' expires=0101000070 {{ item }}
        /usr/bin/pwdadm -f ADMCHG {{ item }}
      # Loop over the *clean* list generated by set_fact
      loop: "{{ users_to_lock }}"
      when: users_to_lock | length > 0

    - name: 3. Replace the empty password line with the impossible hash ('*')
      # This task forces the password field to be non-empty and impossible to match.
      ansible.builtin.lineinfile:
        path: /etc/security/passwd
        regexp: '^\s*password\s*=\s*$'
        line: '        password = *'
        state: present
        backup: yes
      when: users_to_lock | length > 0
      
