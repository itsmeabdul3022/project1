    - name: 1. Fetch ALL User Attributes from AIX
      ansible.builtin.command: lsuser -R files -a id home account_locked ALL
      register: user_data
      changed_when: false

    - name: 2. Parse and Filter Users Eligible for Audit
      # This logic replicates the filtering (UID >= 200, NOT locked, home != /dev/null)
      ansible.builtin.set_fact:
        eligible_users: |
          [
          {% for line in user_data.stdout_lines %}
            {% set parts = line.split() %}
            {% if parts | length >= 4 %}
              {% set name = parts[0] %}
              {% set uid = parts[1].split('=')[1] | int(default=0) %}
              {% set home_path = parts[2].split('=')[1] %}
              {% set locked = parts[3].split('=')[1] %}

              {% if uid >= 200 and locked != 'true' and home_path != '/dev/null' %}
                { 'name': '{{ name }}', 'home': '{{ home_path }}', 'uid': {{ uid }} },
              {% endif %}
            {% endif %}
          {% endfor %}
          ] 
      # Only proceed if there are eligible users to check
      when: user_data.stdout_lines | length > 0

    - name: Get eligible_users_list
      ansible.builtin.set_fact:
        eligible_users_list: "{{ eligible_users | from_yaml | unique }}"

    - name: eligible_users_list 
      debug:
        var: eligible_users_list

    - name: 3. Check Existence and Ownership of Home Directories
      # Loop through the list of filtered users
      ansible.builtin.stat:
        path: "{{ item.home }}"
      register: home_dir_stats
      loop: "{{ eligible_users_list }}"
      loop_control:
        label: "Stat check for {{ item.name }}"

    - name: debug home_dir_stats
      debug:
        msg:  "{{ home_dir_stats.results }}" 

    # --- Remediation Block ---

    - name: 4. A. REMEDIATION- Report and Skip Missing Home Directories
      # This replicates the '[[ ! -d ${home} ]]' check and printf action
      ansible.builtin.debug:
        msg: "WARNING: Home directory '{{ item.item.home }}' for user '{{ item.item.name }}' does not exist. Manual remediation required."
      loop: "{{ home_dir_stats.results }}"
      loop_control:
        label: "Missing home for {{ item.item.name }}"
      when: not item.stat.exists and not item.skipped

    - name: 4. B. REMEDIATION- Identify and Lock Accounts with Mismatched Home Ownership
      # This replicates the Perl ownership check and the 'chuser account_locked=true' action
      ansible.builtin.shell: "chuser -R files  account_locked=true {{ item.item.name }}"
      loop: "{{ home_dir_stats.results }}"
      loop_control:
        label: "Locking {{ item.item.name }}"
      when:
        # 1. Home directory exists (skip users from step 4.A)
        - item.stat.exists
        # 2. Home directory owner UID is NOT the user's UID AND is NOT root (UID 0)
        - item.stat.uid | int != item.item.uid | int
        - item.stat.uid | int != 0
        # 3. Ensure the item was actually checked (not skipped)
        - item.stat is defined

    - name: 5. Display Final List of Locked Accounts (if any)
      ansible.builtin.debug:
        msg: "Account {{ item.item.name }} locked due to improper home directory ownership (Owner UID: {{ item.stat.uid }}) in {{ item.item.home }} has {{ item.stat.uid }} owner"
      loop: "{{ home_dir_stats.results }}"
      loop_control:
        label: "Locked {{ item.item.name }}"
      # The conditional here must match the '4.B' conditional logic exactly
      when:
        - item.stat is defined
        - item.stat.exists
        - item.stat.uid | int != item.item.uid | int
        - item.stat.uid | int != 0
