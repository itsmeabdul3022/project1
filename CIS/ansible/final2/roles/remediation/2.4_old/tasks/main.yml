      # The following command will remove all symbolic links that lack a valid target object:
      # Impact: Symbolic Links, used properly, are a tremendous asset - enhancing system usability (ease of use).
      # However, when pointing to nothing (i.e., whatever they pointed at has been removed but not replaced) system integrity is at the mercy of whatever process replaces that filesystem location later.
      # To reduce risk to system integrity any symbolic link that points at a non-existent file-system object is to be removed.
      # Note: most symbolic links that point at no longer existent objects exist due to incomplete software removal procedures.
      # When an authorized application is (re-)installed it's installation process will (or should) re-create the symbolic link.
      #      ansible.builtin.shell: find -L / ( -fstype jfs -o -fstype jfs2 ) -type l | xargs rm
      #args:
      #  warn: false

   - name:  2.4 list unused symbolic links
     shell: /usr/bin/find -L / \( -fstype jfs -o -fstype jfs2 \) -type l -ls 2>&1 | /usr/bin/grep -v 'Link to an already visited ancestor' | awk '{print $11 " " $12 " " $13}'
     register: item_2_4_output
     ignore_errors: true

   - debug: msg={{ item_2_4_output.stdout_lines }}

   - name:  Filter and Extract Source Paths
      # This step creates a new list containing ONLY the path to the link to be removed.
      # 1. Filters out the warning line (if any remain).
      # 2. Splits each remaining line by space.
      # 3. Takes the first element (index 0), which is the source path (e.g., /bin/X11r6/Motif2.1/uil).
     ansible.builtin.set_fact:
        links_to_remove: >
          {{ item_2_4_output.stdout_lines
             | reject('search', 'already visited ancestor')
             | map('split', ' ')
             | map('first')
             | list
          }}

   - name: 2.4 ensure unused  symbolic link are removed
     ansible.builtin.file:
        path: "{{ item }}" # The path to the link
        state: absent      # Ensures the file/link is removed
     loop: "{{ links_to_remove }}"
     when: links_to_remove | length > 0 # Skip if the list is empty

   - name: 4. Verify removal
     ansible.builtin.debug:
        msg: "Successfully removed link: {{ item }}"
     loop: "{{ links_to_remove }}"
     when: links_to_remove | length > 0
